<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zmy.blog.mapper.ArticleMapper">
  <resultMap id="BaseResultMap" type="com.zmy.blog.entity.Article">
    <id column="article_id" jdbcType="INTEGER" property="articleId" />
    <result column="article_user_id" jdbcType="INTEGER" property="articleUserId" />
    <result column="article_title" jdbcType="VARCHAR" property="articleTitle" />
    <result column="article_view_count" jdbcType="INTEGER" property="articleViewCount" />
    <result column="article_comment_count" jdbcType="INTEGER" property="articleCommentCount" />
    <result column="article_like_count" jdbcType="INTEGER" property="articleLikeCount" />
    <result column="article_is_comment" jdbcType="INTEGER" property="articleIsComment" />
    <result column="article_status" jdbcType="INTEGER" property="articleStatus" />
    <result column="article_order" jdbcType="INTEGER" property="articleOrder" />
    <result column="article_update_time" jdbcType="TIMESTAMP" property="articleUpdateTime" />
    <result column="article_create_time" jdbcType="TIMESTAMP" property="articleCreateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.zmy.blog.entity.ArticleWithBLOBs">
    <result column="article_content" jdbcType="LONGVARCHAR" property="articleContent" />
    <result column="article_summary" jdbcType="LONGVARCHAR" property="articleSummary" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    article_id, article_user_id, article_title, article_view_count, article_comment_count, 
    article_like_count, article_is_comment, article_status, article_order, article_update_time, 
    article_create_time
  </sql>
  <sql id="Blob_Column_List">
    article_content, article_summary
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.zmy.blog.entity.ArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.zmy.blog.entity.ArticleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article
    where article_id = #{articleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zmy.blog.entity.ArticleExample">
    delete from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zmy.blog.entity.ArticleWithBLOBs">
    insert into article (article_id, article_user_id, article_title, 
      article_view_count, article_comment_count, 
      article_like_count, article_is_comment, article_status, 
      article_order, article_update_time, article_create_time, 
      article_content, article_summary)
    values (#{articleId,jdbcType=INTEGER}, #{articleUserId,jdbcType=INTEGER}, #{articleTitle,jdbcType=VARCHAR}, 
      #{articleViewCount,jdbcType=INTEGER}, #{articleCommentCount,jdbcType=INTEGER}, 
      #{articleLikeCount,jdbcType=INTEGER}, #{articleIsComment,jdbcType=INTEGER}, #{articleStatus,jdbcType=INTEGER}, 
      #{articleOrder,jdbcType=INTEGER}, #{articleUpdateTime,jdbcType=TIMESTAMP}, #{articleCreateTime,jdbcType=TIMESTAMP}, 
      #{articleContent,jdbcType=LONGVARCHAR}, #{articleSummary,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zmy.blog.entity.ArticleWithBLOBs">
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        article_id,
      </if>
      <if test="articleUserId != null">
        article_user_id,
      </if>
      <if test="articleTitle != null">
        article_title,
      </if>
      <if test="articleViewCount != null">
        article_view_count,
      </if>
      <if test="articleCommentCount != null">
        article_comment_count,
      </if>
      <if test="articleLikeCount != null">
        article_like_count,
      </if>
      <if test="articleIsComment != null">
        article_is_comment,
      </if>
      <if test="articleStatus != null">
        article_status,
      </if>
      <if test="articleOrder != null">
        article_order,
      </if>
      <if test="articleUpdateTime != null">
        article_update_time,
      </if>
      <if test="articleCreateTime != null">
        article_create_time,
      </if>
      <if test="articleContent != null">
        article_content,
      </if>
      <if test="articleSummary != null">
        article_summary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="articleId != null">
        #{articleId,jdbcType=INTEGER},
      </if>
      <if test="articleUserId != null">
        #{articleUserId,jdbcType=INTEGER},
      </if>
      <if test="articleTitle != null">
        #{articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="articleViewCount != null">
        #{articleViewCount,jdbcType=INTEGER},
      </if>
      <if test="articleCommentCount != null">
        #{articleCommentCount,jdbcType=INTEGER},
      </if>
      <if test="articleLikeCount != null">
        #{articleLikeCount,jdbcType=INTEGER},
      </if>
      <if test="articleIsComment != null">
        #{articleIsComment,jdbcType=INTEGER},
      </if>
      <if test="articleStatus != null">
        #{articleStatus,jdbcType=INTEGER},
      </if>
      <if test="articleOrder != null">
        #{articleOrder,jdbcType=INTEGER},
      </if>
      <if test="articleUpdateTime != null">
        #{articleUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="articleCreateTime != null">
        #{articleCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="articleContent != null">
        #{articleContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="articleSummary != null">
        #{articleSummary,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zmy.blog.entity.ArticleExample" resultType="java.lang.Long">
    select count(*) from article
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update article
    <set>
      <if test="record.articleId != null">
        article_id = #{record.articleId,jdbcType=INTEGER},
      </if>
      <if test="record.articleUserId != null">
        article_user_id = #{record.articleUserId,jdbcType=INTEGER},
      </if>
      <if test="record.articleTitle != null">
        article_title = #{record.articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.articleViewCount != null">
        article_view_count = #{record.articleViewCount,jdbcType=INTEGER},
      </if>
      <if test="record.articleCommentCount != null">
        article_comment_count = #{record.articleCommentCount,jdbcType=INTEGER},
      </if>
      <if test="record.articleLikeCount != null">
        article_like_count = #{record.articleLikeCount,jdbcType=INTEGER},
      </if>
      <if test="record.articleIsComment != null">
        article_is_comment = #{record.articleIsComment,jdbcType=INTEGER},
      </if>
      <if test="record.articleStatus != null">
        article_status = #{record.articleStatus,jdbcType=INTEGER},
      </if>
      <if test="record.articleOrder != null">
        article_order = #{record.articleOrder,jdbcType=INTEGER},
      </if>
      <if test="record.articleUpdateTime != null">
        article_update_time = #{record.articleUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.articleCreateTime != null">
        article_create_time = #{record.articleCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.articleContent != null">
        article_content = #{record.articleContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.articleSummary != null">
        article_summary = #{record.articleSummary,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update article
    set article_id = #{record.articleId,jdbcType=INTEGER},
      article_user_id = #{record.articleUserId,jdbcType=INTEGER},
      article_title = #{record.articleTitle,jdbcType=VARCHAR},
      article_view_count = #{record.articleViewCount,jdbcType=INTEGER},
      article_comment_count = #{record.articleCommentCount,jdbcType=INTEGER},
      article_like_count = #{record.articleLikeCount,jdbcType=INTEGER},
      article_is_comment = #{record.articleIsComment,jdbcType=INTEGER},
      article_status = #{record.articleStatus,jdbcType=INTEGER},
      article_order = #{record.articleOrder,jdbcType=INTEGER},
      article_update_time = #{record.articleUpdateTime,jdbcType=TIMESTAMP},
      article_create_time = #{record.articleCreateTime,jdbcType=TIMESTAMP},
      article_content = #{record.articleContent,jdbcType=LONGVARCHAR},
      article_summary = #{record.articleSummary,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update article
    set article_id = #{record.articleId,jdbcType=INTEGER},
      article_user_id = #{record.articleUserId,jdbcType=INTEGER},
      article_title = #{record.articleTitle,jdbcType=VARCHAR},
      article_view_count = #{record.articleViewCount,jdbcType=INTEGER},
      article_comment_count = #{record.articleCommentCount,jdbcType=INTEGER},
      article_like_count = #{record.articleLikeCount,jdbcType=INTEGER},
      article_is_comment = #{record.articleIsComment,jdbcType=INTEGER},
      article_status = #{record.articleStatus,jdbcType=INTEGER},
      article_order = #{record.articleOrder,jdbcType=INTEGER},
      article_update_time = #{record.articleUpdateTime,jdbcType=TIMESTAMP},
      article_create_time = #{record.articleCreateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zmy.blog.entity.ArticleWithBLOBs">
    update article
    <set>
      <if test="articleUserId != null">
        article_user_id = #{articleUserId,jdbcType=INTEGER},
      </if>
      <if test="articleTitle != null">
        article_title = #{articleTitle,jdbcType=VARCHAR},
      </if>
      <if test="articleViewCount != null">
        article_view_count = #{articleViewCount,jdbcType=INTEGER},
      </if>
      <if test="articleCommentCount != null">
        article_comment_count = #{articleCommentCount,jdbcType=INTEGER},
      </if>
      <if test="articleLikeCount != null">
        article_like_count = #{articleLikeCount,jdbcType=INTEGER},
      </if>
      <if test="articleIsComment != null">
        article_is_comment = #{articleIsComment,jdbcType=INTEGER},
      </if>
      <if test="articleStatus != null">
        article_status = #{articleStatus,jdbcType=INTEGER},
      </if>
      <if test="articleOrder != null">
        article_order = #{articleOrder,jdbcType=INTEGER},
      </if>
      <if test="articleUpdateTime != null">
        article_update_time = #{articleUpdateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="articleCreateTime != null">
        article_create_time = #{articleCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="articleContent != null">
        article_content = #{articleContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="articleSummary != null">
        article_summary = #{articleSummary,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.zmy.blog.entity.ArticleWithBLOBs">
    update article
    set article_user_id = #{articleUserId,jdbcType=INTEGER},
      article_title = #{articleTitle,jdbcType=VARCHAR},
      article_view_count = #{articleViewCount,jdbcType=INTEGER},
      article_comment_count = #{articleCommentCount,jdbcType=INTEGER},
      article_like_count = #{articleLikeCount,jdbcType=INTEGER},
      article_is_comment = #{articleIsComment,jdbcType=INTEGER},
      article_status = #{articleStatus,jdbcType=INTEGER},
      article_order = #{articleOrder,jdbcType=INTEGER},
      article_update_time = #{articleUpdateTime,jdbcType=TIMESTAMP},
      article_create_time = #{articleCreateTime,jdbcType=TIMESTAMP},
      article_content = #{articleContent,jdbcType=LONGVARCHAR},
      article_summary = #{articleSummary,jdbcType=LONGVARCHAR}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zmy.blog.entity.Article">
    update article
    set article_user_id = #{articleUserId,jdbcType=INTEGER},
      article_title = #{articleTitle,jdbcType=VARCHAR},
      article_view_count = #{articleViewCount,jdbcType=INTEGER},
      article_comment_count = #{articleCommentCount,jdbcType=INTEGER},
      article_like_count = #{articleLikeCount,jdbcType=INTEGER},
      article_is_comment = #{articleIsComment,jdbcType=INTEGER},
      article_status = #{articleStatus,jdbcType=INTEGER},
      article_order = #{articleOrder,jdbcType=INTEGER},
      article_update_time = #{articleUpdateTime,jdbcType=TIMESTAMP},
      article_create_time = #{articleCreateTime,jdbcType=TIMESTAMP}
    where article_id = #{articleId,jdbcType=INTEGER}
  </update>

  <select id="getListRecentArticle" resultType="com.zmy.blog.entity.Article" parameterType="java.util.Map">
    select
        <include refid="Base_Column_List" />
    from
        article
    where
        1=1
    order by
        article_update_time desc
    <if test="map.limit != null and map.limit != ''">
        limit #{map.limit}
    </if>
  </select>

  <select id="listCategoryIdByArticleId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select
        category_id
    from
        article_category_ref
    where
        article_id = #{id}
  </select>

  <select id="listArticleByCategoryIds" resultType="com.zmy.blog.entity.Article">
    select
        article.article_id, article.article_user_id, article.article_title,
        article.article_view_count, article.article_comment_count,
        article.article_like_count, article.article_create_time, article.article_update_time,
        article.article_is_comment, article.article_status, article.article_order,
        article.article_summary
    from
        article,article_category_ref
    <where>
      article.article_status = 1
        and
      article.article_id = article_category_ref.article_id
        and
        <if test="categoryIds != null">
          article_category_ref.category_id in
          <foreach collection="categoryIds" open="(" close=")" separator="," item="id">
                #{id}
          </foreach>
        </if>
    </where>
    limit #{limit}
  </select>

  <select id="listArticleByViewCount" resultType="com.zmy.blog.entity.Article">
    select
        <include refid="Base_Column_List" />
    from
        article
    where
        article_status = 1
    order by
        article_view_count desc,
        article_order desc,
        article_id desc
    limit #{limit}
  </select>

  <select id="getAfterArticle" resultType="com.zmy.blog.entity.Article">
    select
        <include refid="Base_Column_List" />
    from
        article
    <where>
      article_status = 1 and article_id > #{id}
    </where>
    order by
        article_id
    limit 1
  </select>

<!--获取上一篇文章-->
  <select id="getPreArticle" resultType="com.zmy.blog.entity.Article">
    select
        <include refid="Base_Column_List" />
    from
        article
    <where>
      article_status = 1 and article_id &lt; #{id}
    </where>
    order by
        article_id desc
    limit 1
  </select>
  <!--随机获取指定篇数的文章-->
  <select id="listRandomArticle" resultType="com.zmy.blog.entity.Article">
    select
        <include refid="Base_Column_List" />
    from
        article
    order by
        rand()
    limit #{limit}
  </select>

  <!--获取评论数最高的几篇文章-->
  <select id="listArticleByCommentCount" resultType="com.zmy.blog.entity.Article">
    select
        <include refid="Base_Column_List" />
    from
        article
    where
        article_status = 1
    order by
        article_comment_count desc,
        article_order desc,
        article_id desc
    limit #{limit}
  </select>
</mapper>